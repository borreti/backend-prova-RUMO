<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <style>
        .disabled {
            pointer-events: none;
            opacity: 0.4;
        }
    </style>
    <title>@ViewBag.Title</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Simulador de pedidos", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Início", "Index", "Home", new { area = "" }, null)</li>
                    <li>@Html.ActionLink("API", "Index", "Help", new { area = "" }, null)</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - Simulador de pedidos ASP.NET</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)

    <script>
        let drinks = [];
        let foods = [];
        const client = {}

        const ajaxRequest = (method, endpoint, xmlhttp) => {
            xmlhttp.open(method, endpoint, true);
            xmlhttp.send();
        };

        const setSelects = (method, endpoint, type) => {
            const xmlhttp = new XMLHttpRequest();
            xmlhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    const responseJSON = JSON.parse(this.responseText);
                    const items = responseJSON;
                    let selectId;
                    let idPrefix;
                    if (type === 'food') {
                        selectId = 'selectFood';
                        idPrefix = 'Food';
                        foods = items;
                    } else if (type === 'drink') {
                        selectId = 'selectDrink';
                        idPrefix = 'Drink';
                        drinks = items;
                    }
                    const select = document.getElementById(selectId);
                    items.map((input) => {
                        select.innerHTML += `<option value="${input[idPrefix + 'Id']}"$>${input.Name}</option>`
                    });
                }
            };
            ajaxRequest(method, endpoint, xmlhttp);
        };

        const connectClient = () => {
            const cash = document.getElementById('money').value;
            const name = document.getElementById('fullName').value;
            if (isNaN(cash)) {
                alert('Campo dinheiro disponível não contém um número.');
                return -1;
            } else if (cash < 0) {
                alert('Campo dinheiro deve ter um valor maior ou igual a 0.');
                return -1;
            } else if (name.length <= 0) {
                alert('Campo de nome deve ser preenchido.');
                return -1;
            } else {
                client.name = name;
                client.cash = cash;
                document.getElementById('orders').classList.remove('disabled');
                document.getElementById('divClient').classList.add('disabled');
            }
        };


        const refreshValue = (type) => {
            let item;
            let idName;
            let labelValue;
            if (type === 'food') {
                item = document.getElementById('selectFood');
                idName = 'foodValue';
                labelValue = 'Valor dos alimentos: ';
            } else if (type === 'drink') {
                item = document.getElementById('selectDrink');
                idName = 'drinkValue';
                labelValue = 'Valor das bebidas: ';
            } else {
                alert(`Tipo ${type} é inválido. Os tipos válidos são "foodValue" e "drinkValue."`);
            }
            const index = item.value - 1;
            const itemHTML = document.getElementById(idName);
            let multiplierHTML = document.getElementById(type + 'Quant');
            let multiplierValue = multiplierHTML.value;
            if (isNaN(multiplierValue)) {
                multiplierHTML.value = 1;
                multiplierValue = 1;
            }
            itemHTML.innerHTML = labelValue + (foods[index].Price * multiplierValue);
        };

        setSelects('GET', 'http://localhost:55336/api/Foods', 'food');
        setSelects('GET', 'http://localhost:55336/api/Drinks', 'drink');
        //setAllTables('GET', 'http://localhost:55336/api/Tables');
    </script>
</body>
</html>
